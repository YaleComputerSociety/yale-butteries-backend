// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_FULL")
}

enum UserRole {
  CUSTOMER
  STAFF
}

model User {
  id        String      @id @default(uuid())
  netId     String      @unique
  name      String
  role      UserRole    @default(CUSTOMER)
  college   College     @relation(fields: [collegeId], references: [id])
  collegeId Int
  orders    Order[]
  email     String?
  token     String? // May be used for security
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  OrderItem OrderItem[]

  @@map("user")
}

// college represents a college and its buttery
model College {
  id                  Int        @id @default(autoincrement())
  name                String     @unique // e.g. Morse
  butteryName         String     @unique // e.g. The Morsel
  isButteryIntegrated Boolean    @default(false) // whether this buttery is integrated into Yale Butteries
  isOpen              Boolean    @default(true) // set to false if the buttery closes early or wants to stop taking in orders from Yale Butteries for a period of tiem
  daysOpen            String[]
  openTime            String     @default("22:00")
  closeTime           String     @default("0:00")
  users               User[]
  orders              Order[]
  menuItems           MenuItem[]
  imageUrl            String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now()) @updatedAt

  @@map("college")
}

enum MenuItemType {
  FOOD
  DRINK
  DESSERT
}

// The items that make up the menu of any given college
model MenuItem {
  id          Int          @id @default(autoincrement())
  name        String
  price       Int // measured in cents (130 = $1.30)
  description String       @default("No description provided")
  isActive    Boolean      @default(true)
  type        MenuItemType @default(FOOD)
  college     College      @relation(fields: [collegeId], references: [id])
  collegeId   Int
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@map("menu_item")
}

enum OrderStatus {
  QUEUED
  ONGOING
  READY
  PAID
  CANCELLED
  TIMEOUT
}

// A user makes an order that contains one ore more order items
model Order {
  id               Int         @id @default(autoincrement())
  price            Int // the price in cents (130 = $1.30) of all completed order items: cancelled items are ignored
  status           OrderStatus
  college          College     @relation(fields: [collegeId], references: [id])
  collegeId        Int
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  orderItems       OrderItem[]
  stripeFee        Int? // the amount taken by stripe, which the buttery does not receive
  paymentIntentId  String? // the id of the payment method to charge later; requires stripe secret key to work
  initialQueueSize Int?
  endQueueSize     Int?
  readyAt          DateTime?
  paidAt           DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt

  @@map("order")
}

enum OrderItemStatus {
  QUEUED
  ONGOING
  READY
  CANCELLED
}

// order items are the individual menu items ordered in an order; they reference menu items but are different from menu items
model OrderItem {
  id         Int             @id @default(autoincrement())
  price      Int // in cents (130 = $1.30)
  status     OrderItemStatus
  order      Order           @relation(fields: [orderId], references: [id])
  orderId    Int
  menuItem   MenuItem        @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt

  @@map("order_item")
}
