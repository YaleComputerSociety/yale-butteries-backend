// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_FULL")
}

model User {
  id               Int      @id @default(autoincrement())
  netid            String   
  email            String
  name             String
  token            String?
  permissions      String?
  college   College @relation(fields: [collegeId], references: [id])
  collegeId Int
  transaction_histories TransactionHistory[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
}

model College {
  id Int @id @default(autoincrement())
  college String @unique
  image_url String?
  buttery_activated Boolean
  users User[]
  transaction_histories TransactionHistory[]
  menu_items MenuItem[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
  times ButteryTime[]
}

model MenuItem {
  id Int @id @default(autoincrement())
  item String
  price Int
  description String?
  limited_time Boolean?
  is_active Boolean
  item_type ItemType @default(FOOD)
  college College @relation(fields: [collegeId], references: [id])
  collegeId Int
  transaction_item TransactionItem[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
}

model TransactionItem {
  id Int @id @default(autoincrement())
  item_cost Int
  order_status OrderStatus @default(PENDING)
  transaction_history TransactionHistory @relation(fields: [transactionHistoryId], references: [id])
  transactionHistoryId Int
  menu_item MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
}

enum OrderStatus {
  PENDING
  CANCELLED
  IN_PROGRESS
  FINISHED
}

enum ItemType {
  FOOD
  DRINK
  DESSERT
}

model TransactionHistory {
  id Int @id @default(autoincrement())
  order_placed DateTime
  order_complete DateTime?
  queue_size_on_placement Int
  queue_size_on_complete Int?
  in_progress String
  total_price Int
  charged_price Int?
  stripe_fee Int?
  reimbursed Boolean?
  college College @relation(fields: [collegeId], references: [id])
  collegeId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  transaction_items TransactionItem[]
  payment_intent_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
}

model ButteryTime {
  id Int @id @default(autoincrement())
  day String
  isOpen Boolean
  openTime String
  closeTime String
  college College @relation(fields: [collegeId], references: [id])
  collegeId Int
}